/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ParticipantProfileService } from "../participantProfile.service";
import { ParticipantProfileCreateInput } from "./ParticipantProfileCreateInput";
import { ParticipantProfile } from "./ParticipantProfile";
import { ParticipantProfileFindManyArgs } from "./ParticipantProfileFindManyArgs";
import { ParticipantProfileWhereUniqueInput } from "./ParticipantProfileWhereUniqueInput";
import { ParticipantProfileUpdateInput } from "./ParticipantProfileUpdateInput";

export class ParticipantProfileControllerBase {
  constructor(protected readonly service: ParticipantProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ParticipantProfile })
  async createParticipantProfile(
    @common.Body() data: ParticipantProfileCreateInput
  ): Promise<ParticipantProfile> {
    return await this.service.createParticipantProfile({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        certifications: true,
        createdAt: true,
        eventsParticipated: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ParticipantProfile] })
  @ApiNestedQuery(ParticipantProfileFindManyArgs)
  async participantProfiles(
    @common.Req() request: Request
  ): Promise<ParticipantProfile[]> {
    const args = plainToClass(ParticipantProfileFindManyArgs, request.query);
    return this.service.participantProfiles({
      ...args,
      select: {
        certifications: true,
        createdAt: true,
        eventsParticipated: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ParticipantProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async participantProfile(
    @common.Param() params: ParticipantProfileWhereUniqueInput
  ): Promise<ParticipantProfile | null> {
    const result = await this.service.participantProfile({
      where: params,
      select: {
        certifications: true,
        createdAt: true,
        eventsParticipated: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ParticipantProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateParticipantProfile(
    @common.Param() params: ParticipantProfileWhereUniqueInput,
    @common.Body() data: ParticipantProfileUpdateInput
  ): Promise<ParticipantProfile | null> {
    try {
      return await this.service.updateParticipantProfile({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          certifications: true,
          createdAt: true,
          eventsParticipated: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ParticipantProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteParticipantProfile(
    @common.Param() params: ParticipantProfileWhereUniqueInput
  ): Promise<ParticipantProfile | null> {
    try {
      return await this.service.deleteParticipantProfile({
        where: params,
        select: {
          certifications: true,
          createdAt: true,
          eventsParticipated: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
