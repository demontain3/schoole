/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ParticipantProfile } from "./ParticipantProfile";
import { ParticipantProfileCountArgs } from "./ParticipantProfileCountArgs";
import { ParticipantProfileFindManyArgs } from "./ParticipantProfileFindManyArgs";
import { ParticipantProfileFindUniqueArgs } from "./ParticipantProfileFindUniqueArgs";
import { CreateParticipantProfileArgs } from "./CreateParticipantProfileArgs";
import { UpdateParticipantProfileArgs } from "./UpdateParticipantProfileArgs";
import { DeleteParticipantProfileArgs } from "./DeleteParticipantProfileArgs";
import { User } from "../../user/base/User";
import { ParticipantProfileService } from "../participantProfile.service";
@graphql.Resolver(() => ParticipantProfile)
export class ParticipantProfileResolverBase {
  constructor(protected readonly service: ParticipantProfileService) {}

  async _participantProfilesMeta(
    @graphql.Args() args: ParticipantProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ParticipantProfile])
  async participantProfiles(
    @graphql.Args() args: ParticipantProfileFindManyArgs
  ): Promise<ParticipantProfile[]> {
    return this.service.participantProfiles(args);
  }

  @graphql.Query(() => ParticipantProfile, { nullable: true })
  async participantProfile(
    @graphql.Args() args: ParticipantProfileFindUniqueArgs
  ): Promise<ParticipantProfile | null> {
    const result = await this.service.participantProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ParticipantProfile)
  async createParticipantProfile(
    @graphql.Args() args: CreateParticipantProfileArgs
  ): Promise<ParticipantProfile> {
    return await this.service.createParticipantProfile({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ParticipantProfile)
  async updateParticipantProfile(
    @graphql.Args() args: UpdateParticipantProfileArgs
  ): Promise<ParticipantProfile | null> {
    try {
      return await this.service.updateParticipantProfile({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ParticipantProfile)
  async deleteParticipantProfile(
    @graphql.Args() args: DeleteParticipantProfileArgs
  ): Promise<ParticipantProfile | null> {
    try {
      return await this.service.deleteParticipantProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: ParticipantProfile
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
