/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ParticipantProfile as PrismaParticipantProfile,
  User as PrismaUser,
} from "@prisma/client";

export class ParticipantProfileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ParticipantProfileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.participantProfile.count(args);
  }

  async participantProfiles(
    args: Prisma.ParticipantProfileFindManyArgs
  ): Promise<PrismaParticipantProfile[]> {
    return this.prisma.participantProfile.findMany(args);
  }
  async participantProfile(
    args: Prisma.ParticipantProfileFindUniqueArgs
  ): Promise<PrismaParticipantProfile | null> {
    return this.prisma.participantProfile.findUnique(args);
  }
  async createParticipantProfile(
    args: Prisma.ParticipantProfileCreateArgs
  ): Promise<PrismaParticipantProfile> {
    return this.prisma.participantProfile.create(args);
  }
  async updateParticipantProfile(
    args: Prisma.ParticipantProfileUpdateArgs
  ): Promise<PrismaParticipantProfile> {
    return this.prisma.participantProfile.update(args);
  }
  async deleteParticipantProfile(
    args: Prisma.ParticipantProfileDeleteArgs
  ): Promise<PrismaParticipantProfile> {
    return this.prisma.participantProfile.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.participantProfile
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
