/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SponsorService } from "../sponsor.service";
import { SponsorCreateInput } from "./SponsorCreateInput";
import { Sponsor } from "./Sponsor";
import { SponsorFindManyArgs } from "./SponsorFindManyArgs";
import { SponsorWhereUniqueInput } from "./SponsorWhereUniqueInput";
import { SponsorUpdateInput } from "./SponsorUpdateInput";

export class SponsorControllerBase {
  constructor(protected readonly service: SponsorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sponsor })
  async createSponsor(
    @common.Body() data: SponsorCreateInput
  ): Promise<Sponsor> {
    return await this.service.createSponsor({
      data: {
        ...data,

        event: data.event
          ? {
              connect: data.event,
            }
          : undefined,
      },
      select: {
        contactInfo: true,
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sponsor] })
  @ApiNestedQuery(SponsorFindManyArgs)
  async sponsors(@common.Req() request: Request): Promise<Sponsor[]> {
    const args = plainToClass(SponsorFindManyArgs, request.query);
    return this.service.sponsors({
      ...args,
      select: {
        contactInfo: true,
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sponsor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sponsor(
    @common.Param() params: SponsorWhereUniqueInput
  ): Promise<Sponsor | null> {
    const result = await this.service.sponsor({
      where: params,
      select: {
        contactInfo: true,
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sponsor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSponsor(
    @common.Param() params: SponsorWhereUniqueInput,
    @common.Body() data: SponsorUpdateInput
  ): Promise<Sponsor | null> {
    try {
      return await this.service.updateSponsor({
        where: params,
        data: {
          ...data,

          event: data.event
            ? {
                connect: data.event,
              }
            : undefined,
        },
        select: {
          contactInfo: true,
          createdAt: true,

          event: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sponsor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSponsor(
    @common.Param() params: SponsorWhereUniqueInput
  ): Promise<Sponsor | null> {
    try {
      return await this.service.deleteSponsor({
        where: params,
        select: {
          contactInfo: true,
          createdAt: true,

          event: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
