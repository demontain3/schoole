/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VolunteerProfileService } from "../volunteerProfile.service";
import { VolunteerProfileCreateInput } from "./VolunteerProfileCreateInput";
import { VolunteerProfile } from "./VolunteerProfile";
import { VolunteerProfileFindManyArgs } from "./VolunteerProfileFindManyArgs";
import { VolunteerProfileWhereUniqueInput } from "./VolunteerProfileWhereUniqueInput";
import { VolunteerProfileUpdateInput } from "./VolunteerProfileUpdateInput";

export class VolunteerProfileControllerBase {
  constructor(protected readonly service: VolunteerProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VolunteerProfile })
  async createVolunteerProfile(
    @common.Body() data: VolunteerProfileCreateInput
  ): Promise<VolunteerProfile> {
    return await this.service.createVolunteerProfile({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        eventsVolunteered: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VolunteerProfile] })
  @ApiNestedQuery(VolunteerProfileFindManyArgs)
  async volunteerProfiles(
    @common.Req() request: Request
  ): Promise<VolunteerProfile[]> {
    const args = plainToClass(VolunteerProfileFindManyArgs, request.query);
    return this.service.volunteerProfiles({
      ...args,
      select: {
        createdAt: true,
        eventsVolunteered: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VolunteerProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async volunteerProfile(
    @common.Param() params: VolunteerProfileWhereUniqueInput
  ): Promise<VolunteerProfile | null> {
    const result = await this.service.volunteerProfile({
      where: params,
      select: {
        createdAt: true,
        eventsVolunteered: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VolunteerProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVolunteerProfile(
    @common.Param() params: VolunteerProfileWhereUniqueInput,
    @common.Body() data: VolunteerProfileUpdateInput
  ): Promise<VolunteerProfile | null> {
    try {
      return await this.service.updateVolunteerProfile({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          eventsVolunteered: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VolunteerProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVolunteerProfile(
    @common.Param() params: VolunteerProfileWhereUniqueInput
  ): Promise<VolunteerProfile | null> {
    try {
      return await this.service.deleteVolunteerProfile({
        where: params,
        select: {
          createdAt: true,
          eventsVolunteered: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
