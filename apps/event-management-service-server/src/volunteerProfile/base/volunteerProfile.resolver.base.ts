/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VolunteerProfile } from "./VolunteerProfile";
import { VolunteerProfileCountArgs } from "./VolunteerProfileCountArgs";
import { VolunteerProfileFindManyArgs } from "./VolunteerProfileFindManyArgs";
import { VolunteerProfileFindUniqueArgs } from "./VolunteerProfileFindUniqueArgs";
import { CreateVolunteerProfileArgs } from "./CreateVolunteerProfileArgs";
import { UpdateVolunteerProfileArgs } from "./UpdateVolunteerProfileArgs";
import { DeleteVolunteerProfileArgs } from "./DeleteVolunteerProfileArgs";
import { User } from "../../user/base/User";
import { VolunteerProfileService } from "../volunteerProfile.service";
@graphql.Resolver(() => VolunteerProfile)
export class VolunteerProfileResolverBase {
  constructor(protected readonly service: VolunteerProfileService) {}

  async _volunteerProfilesMeta(
    @graphql.Args() args: VolunteerProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VolunteerProfile])
  async volunteerProfiles(
    @graphql.Args() args: VolunteerProfileFindManyArgs
  ): Promise<VolunteerProfile[]> {
    return this.service.volunteerProfiles(args);
  }

  @graphql.Query(() => VolunteerProfile, { nullable: true })
  async volunteerProfile(
    @graphql.Args() args: VolunteerProfileFindUniqueArgs
  ): Promise<VolunteerProfile | null> {
    const result = await this.service.volunteerProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VolunteerProfile)
  async createVolunteerProfile(
    @graphql.Args() args: CreateVolunteerProfileArgs
  ): Promise<VolunteerProfile> {
    return await this.service.createVolunteerProfile({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => VolunteerProfile)
  async updateVolunteerProfile(
    @graphql.Args() args: UpdateVolunteerProfileArgs
  ): Promise<VolunteerProfile | null> {
    try {
      return await this.service.updateVolunteerProfile({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VolunteerProfile)
  async deleteVolunteerProfile(
    @graphql.Args() args: DeleteVolunteerProfileArgs
  ): Promise<VolunteerProfile | null> {
    try {
      return await this.service.deleteVolunteerProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: VolunteerProfile
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
