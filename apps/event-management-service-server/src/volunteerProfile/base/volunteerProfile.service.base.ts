/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  VolunteerProfile as PrismaVolunteerProfile,
  User as PrismaUser,
} from "@prisma/client";

export class VolunteerProfileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VolunteerProfileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.volunteerProfile.count(args);
  }

  async volunteerProfiles(
    args: Prisma.VolunteerProfileFindManyArgs
  ): Promise<PrismaVolunteerProfile[]> {
    return this.prisma.volunteerProfile.findMany(args);
  }
  async volunteerProfile(
    args: Prisma.VolunteerProfileFindUniqueArgs
  ): Promise<PrismaVolunteerProfile | null> {
    return this.prisma.volunteerProfile.findUnique(args);
  }
  async createVolunteerProfile(
    args: Prisma.VolunteerProfileCreateArgs
  ): Promise<PrismaVolunteerProfile> {
    return this.prisma.volunteerProfile.create(args);
  }
  async updateVolunteerProfile(
    args: Prisma.VolunteerProfileUpdateArgs
  ): Promise<PrismaVolunteerProfile> {
    return this.prisma.volunteerProfile.update(args);
  }
  async deleteVolunteerProfile(
    args: Prisma.VolunteerProfileDeleteArgs
  ): Promise<PrismaVolunteerProfile> {
    return this.prisma.volunteerProfile.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.volunteerProfile
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
